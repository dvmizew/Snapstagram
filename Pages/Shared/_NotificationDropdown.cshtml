@using Snapstagram.Models
@{
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

<div class="notification-dropdown" id="notificationDropdown">
    <button class="nav-icon notification-icon" id="notificationIcon" title="Notifications" type="button">
        <i class="fas fa-heart"></i>
        <span class="notification-count" id="notificationBadge" style="display: none;">0</span>
    </button>
    
    <div class="notification-dropdown-menu" id="notificationMenu">
        <div class="notification-dropdown-header">
            <h6 class="notification-dropdown-title">Notifications</h6>
            <button class="notification-settings-btn" id="markAllReadBtn" title="Mark all as read">
                <i class="fas fa-check"></i>
            </button>
        </div>
        
        <div class="notification-list" id="notificationList">
            <div class="notification-loading" id="notificationLoading">
                <div class="loading"></div>
                <span>Loading notifications...</span>
            </div>
        </div>
        
        <div class="notification-footer">
            <a href="/Notifications" class="view-all-notifications">View All Notifications</a>
        </div>
    </div>
</div>

<script>
(function() {
    'use strict';
    
    try {
        document.addEventListener('DOMContentLoaded', function() {
            initializeNotificationDropdown();
        });
    } catch (error) {
        console.error('Error initializing notification dropdown:', error);
        // Show fallback button if there's an error
        const fallbackBtn = document.getElementById('fallbackNotificationBtn');
        if (fallbackBtn) {
            fallbackBtn.style.display = 'flex';
        }
    }

    function initializeNotificationDropdown() {
    const notificationIcon = document.getElementById('notificationIcon');
    const notificationMenu = document.getElementById('notificationMenu');
    const markAllReadBtn = document.getElementById('markAllReadBtn');
    
    // Toggle dropdown
    notificationIcon?.addEventListener('click', function(e) {
        e.stopPropagation();
        notificationMenu.classList.toggle('show');
        
        if (notificationMenu.classList.contains('show')) {
            loadNotifications();
        }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
        if (!notificationIcon.contains(e.target) && !notificationMenu.contains(e.target)) {
            notificationMenu.classList.remove('show');
        }
    });
    
    // Mark all as read
    markAllReadBtn?.addEventListener('click', function() {
        markAllNotificationsAsRead();
    });
    
    // Load initial notification count
    loadNotificationCount();
    
    // Set up SignalR for real-time notifications
    setupSignalRNotifications();
}

async function loadNotifications() {
    const notificationList = document.getElementById('notificationList');
    const loadingDiv = document.getElementById('notificationLoading');
    
    try {
        loadingDiv.style.display = 'flex';
        
        const response = await fetch('/api/notifications?pageSize=10');
        const data = await response.json();
        
        loadingDiv.style.display = 'none';
        
        if (data.success && data.data?.items?.length > 0) {
            renderNotifications(data.data.items);
        } else {
            renderEmptyNotifications();
        }
    } catch (error) {
        console.error('Error loading notifications:', error);
        loadingDiv.style.display = 'none';
        renderErrorNotifications();
    }
}

function renderNotifications(notifications) {
    const notificationList = document.getElementById('notificationList');
    
    const html = notifications.map(notification => {
        const timeAgo = getRelativeTime(new Date(notification.createdAt));
        const isUnread = !notification.isRead;
        const typeIcon = getNotificationTypeIcon(notification.type);
        
        return `
            <a href="#" class="notification-item ${isUnread ? 'unread' : ''}" data-id="${notification.id}">
                <div class="position-relative">
                    <img src="${notification.fromUser.profilePictureUrl || getDefaultAvatar(notification.fromUser.displayName || notification.fromUser.userName)}" 
                         alt="${escapeHtml(notification.fromUser.displayName || notification.fromUser.userName)}" 
                         class="notification-avatar">
                    <div class="notification-type-icon ${notification.type.toLowerCase()}">
                        <i class="${typeIcon}"></i>
                    </div>
                </div>
                <div class="notification-content">
                    <div class="notification-text">
                        <span class="username">${escapeHtml(notification.fromUser.displayName || notification.fromUser.userName)}</span>
                        ${getNotificationMessage(notification)}
                    </div>
                    <div class="notification-time">${timeAgo}</div>
                </div>
                ${notification.postId && notification.post?.imageUrl ? 
                    `<img src="${notification.post.imageUrl}" alt="Post" class="notification-media">` : ''}
            </a>
        `;
    }).join('');
    
    notificationList.innerHTML = html;
    
    // Add click handlers for notifications
    document.querySelectorAll('.notification-item').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const notificationId = this.dataset.id;
            handleNotificationClick(notificationId);
        });
    });
}

function renderEmptyNotifications() {
    const notificationList = document.getElementById('notificationList');
    notificationList.innerHTML = `
        <div class="notification-empty">
            <div class="notification-empty-icon">
                <i class="fas fa-bell-slash"></i>
            </div>
            <div class="notification-empty-text">No notifications yet</div>
            <div class="notification-empty-subtext">When you get notifications, they'll show up here</div>
        </div>
    `;
}

function renderErrorNotifications() {
    const notificationList = document.getElementById('notificationList');
    notificationList.innerHTML = `
        <div class="notification-error">
            <i class="fas fa-exclamation-triangle mb-2"></i>
            <p class="mb-2">Failed to load notifications</p>
            <button class="notification-retry-btn" onclick="loadNotifications()">Retry</button>
        </div>
    `;
}

function getNotificationTypeIcon(type) {
    const icons = {
        'Like': 'fas fa-heart',
        'Comment': 'fas fa-comment', 
        'Follow': 'fas fa-user-plus',
        'Message': 'fas fa-paper-plane',
        'StoryView': 'fas fa-eye',
        'Mention': 'fas fa-at'
    };
    return icons[type] || 'fas fa-bell';
}

function getNotificationMessage(notification) {
    const messages = {
        'Like': 'liked your post',
        'Comment': 'commented on your post',
        'Follow': 'started following you',
        'Message': 'sent you a message',
        'StoryView': 'viewed your story',
        'Mention': 'mentioned you in a comment'
    };
    return messages[notification.type] || 'sent you a notification';
}

// Use global getRelativeTime function from site.js

async function loadNotificationCount() {
    try {
        const response = await fetch('/api/notifications/unread-count');
        const data = await response.json();
        
        if (data.success) {
            updateNotificationBadge(data.data);
        }
    } catch (error) {
        console.error('Error loading notification count:', error);
    }
}

function updateNotificationBadge(count) {
    const badge = document.getElementById('notificationBadge');
    if (badge) {
        if (count > 0) {
            badge.textContent = count > 99 ? '99+' : count.toString();
            badge.style.display = 'block';
        } else {
            badge.style.display = 'none';
        }
    }
}

async function markAllNotificationsAsRead() {
    try {
        const response = await fetch('/api/notifications/mark-all-read', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        });
        
        if (response.ok) {
            // Update UI
            document.querySelectorAll('.notification-item.unread').forEach(item => {
                item.classList.remove('unread');
                const dot = item.querySelector('.notification-unread-dot');
                if (dot) dot.remove();
            });
            
            // Update badge
            updateNotificationBadge(0);
            
            showNotification('All notifications marked as read', 'success');
        }
    } catch (error) {
        console.error('Error marking notifications as read:', error);
        showNotification('Failed to mark notifications as read', 'error');
    }
}

async function handleNotificationClick(notificationId) {
    try {
        // Mark as read
        const response = await fetch(`/api/notifications/${notificationId}/read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        });
        
        if (response.ok) {
            // Update UI
            const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
            if (notificationItem) {
                notificationItem.classList.remove('unread');
                const dot = notificationItem.querySelector('.notification-unread-dot');
                if (dot) dot.remove();
            }
            
            // Update badge count
            loadNotificationCount();
        }
        
        // TODO: Navigate to relevant page based on notification type
        // For now, just close the dropdown
        document.getElementById('notificationMenu').classList.remove('show');
        
    } catch (error) {
        console.error('Error handling notification click:', error);
    }
}

function setupSignalRNotifications() {
    if (typeof signalR === 'undefined') {
        console.warn('SignalR not available for real-time notifications');
        return;
    }
    
    const connection = new signalR.HubConnectionBuilder()
        .withUrl('/notificationHub')
        .build();
    
    connection.start().then(function() {
        console.log('Connected to notification hub');
    }).catch(function(err) {
        console.error('Error connecting to notification hub:', err);
    });
    
    // Listen for new notifications
    connection.on('NewNotification', function(notification) {
        // Update badge count
        loadNotificationCount();
        
        // Show toast notification
        const message = `${notification.fromUser.displayName || notification.fromUser.userName} ${getNotificationMessage(notification)}`;
        showNotification(message, 'info');
        
        // If dropdown is open, refresh notifications
        const notificationMenu = document.getElementById('notificationMenu');
        if (notificationMenu.classList.contains('show')) {
            loadNotifications();
        }
    });
}

})(); // End of IIFE
</script>
