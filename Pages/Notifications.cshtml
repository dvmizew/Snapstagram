@page
@model Snapstagram.Pages.NotificationsModel
@{
    ViewData["Title"] = "Notifications";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="notifications-page">
                <div class="page-header">
                    <h2 class="page-title">
                        <i class="fas fa-bell me-2 text-primary"></i>
                        Notifications
                    </h2>
                    <div class="header-actions">
                        <button class="btn btn-outline-primary btn-sm" id="markAllReadBtn">
                            <i class="fas fa-check me-1"></i>
                            Mark All Read
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown">
                                <i class="fas fa-filter me-1"></i>
                                Filter
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item filter-option active" href="#" data-filter="all">All Notifications</a></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="unread">Unread Only</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="Like">Likes</a></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="Comment">Comments</a></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="Follow">Follows</a></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="Message">Messages</a></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="StoryView">Story Views</a></li>
                                <li><a class="dropdown-item filter-option" href="#" data-filter="Mention">Mentions</a></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Filter Stats -->
                <div class="filter-stats" id="filterStats">
                    <span class="total-count">Loading...</span>
                </div>

                <!-- Notifications List -->
                <div class="notifications-container">
                    <div class="notifications-loading" id="notificationsLoading">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-2">Loading your notifications...</div>
                        </div>
                    </div>

                    <div class="notifications-list" id="notificationsList" style="display: none;">
                        <!-- Notifications will be loaded here -->
                    </div>

                    <div class="notifications-empty" id="notificationsEmpty" style="display: none;">
                        <div class="text-center py-5">
                            <i class="fas fa-bell-slash text-muted mb-3" style="font-size: 3rem;"></i>
                            <h4 class="text-muted">No notifications found</h4>
                            <p class="text-muted">When you receive notifications, they'll appear here.</p>
                        </div>
                    </div>

                    <div class="notifications-error" id="notificationsError" style="display: none;">
                        <div class="text-center py-5">
                            <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                            <h4 class="text-warning">Failed to load notifications</h4>
                            <p class="text-muted">Please try refreshing the page.</p>
                            <button class="btn btn-primary" onclick="loadNotifications()">
                                <i class="fas fa-refresh me-1"></i>
                                Retry
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Load More Button -->
                <div class="text-center mt-4" id="loadMoreContainer" style="display: none;">
                    <button class="btn btn-outline-primary" id="loadMoreBtn">
                        <i class="fas fa-chevron-down me-1"></i>
                        Load More
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeNotificationsPage();
});

let currentPage = 1;
let currentFilter = 'all';
let isLoading = false;
let hasMore = true;
const pageSize = 20;

function initializeNotificationsPage() {
    // Load initial notifications
    loadNotifications(true);
    
    // Set up event listeners
    setupEventListeners();
    
    // Set up SignalR for real-time updates
    setupSignalRNotifications();
}

function setupEventListeners() {
    // Mark all as read
    document.getElementById('markAllReadBtn')?.addEventListener('click', markAllNotificationsAsRead);
    
    // Filter options
    document.querySelectorAll('.filter-option').forEach(option => {
        option.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Update active filter
            document.querySelectorAll('.filter-option').forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');
            
            // Set new filter and reload
            currentFilter = this.dataset.filter;
            currentPage = 1;
            hasMore = true;
            loadNotifications(true);
        });
    });
    
    // Load more button
    document.getElementById('loadMoreBtn')?.addEventListener('click', function() {
        loadNotifications(false);
    });
}

async function loadNotifications(reset = false) {
    if (isLoading) return;
    
    isLoading = true;
    
    const loadingDiv = document.getElementById('notificationsLoading');
    const listDiv = document.getElementById('notificationsList');
    const emptyDiv = document.getElementById('notificationsEmpty');
    const errorDiv = document.getElementById('notificationsError');
    const loadMoreContainer = document.getElementById('loadMoreContainer');
    
    if (reset) {
        loadingDiv.style.display = 'block';
        listDiv.style.display = 'none';
        emptyDiv.style.display = 'none';
        errorDiv.style.display = 'none';
        loadMoreContainer.style.display = 'none';
        currentPage = 1;
    } else {
        document.getElementById('loadMoreBtn').disabled = true;
        document.getElementById('loadMoreBtn').innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
    }
    
    try {
        const params = new URLSearchParams({
            page: currentPage,
            pageSize: pageSize
        });
        
        if (currentFilter !== 'all') {
            if (currentFilter === 'unread') {
                params.append('unreadOnly', 'true');
            } else {
                params.append('type', currentFilter);
            }
        }
        
        const response = await fetch(`/api/notifications?${params}`);
        const data = await response.json();
        
        if (data.success) {
            const notifications = data.data.items || [];
            
            if (reset) {
                loadingDiv.style.display = 'none';
                
                if (notifications.length === 0) {
                    emptyDiv.style.display = 'block';
                } else {
                    listDiv.style.display = 'block';
                    renderNotifications(notifications, true);
                    updateFilterStats(data.data.totalCount, data.data.unreadCount);
                }
            } else {
                renderNotifications(notifications, false);
            }
            
            // Update pagination
            hasMore = notifications.length === pageSize;
            currentPage++;
            
            if (hasMore && notifications.length > 0) {
                loadMoreContainer.style.display = 'block';
            } else {
                loadMoreContainer.style.display = 'none';
            }
        } else {
            throw new Error(data.message || 'Failed to load notifications');
        }
    } catch (error) {
        console.error('Error loading notifications:', error);
        
        if (reset) {
            loadingDiv.style.display = 'none';
            errorDiv.style.display = 'block';
        } else {
            showNotification('Failed to load more notifications', 'error');
        }
    } finally {
        isLoading = false;
        
        if (!reset) {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            loadMoreBtn.disabled = false;
            loadMoreBtn.innerHTML = '<i class="fas fa-chevron-down me-1"></i>Load More';
        }
    }
}

function renderNotifications(notifications, reset = false) {
    const listDiv = document.getElementById('notificationsList');
    
    const html = notifications.map(notification => {
        const timeAgo = getRelativeTime(new Date(notification.createdAt));
        const isUnread = !notification.isRead;
        const icon = getNotificationIcon(notification.type);
        const actionText = getNotificationMessage(notification);
        
        return `
            <div class="notification-item-full ${isUnread ? 'unread' : ''}" data-id="${notification.id}">
                <div class="notification-icon-full">
                    <i class="${icon}"></i>
                </div>
                <div class="notification-content-full">
                    <div class="notification-user">
                        <img src="${notification.fromUser.profilePictureUrl || '/images/default-avatar.png'}" 
                             alt="${escapeHtml(notification.fromUser.displayName || notification.fromUser.userName)}"
                             class="notification-avatar">
                        <div class="notification-text-full">
                            <span class="notification-username">${escapeHtml(notification.fromUser.displayName || notification.fromUser.userName)}</span>
                            <span class="notification-action">${actionText}</span>
                        </div>
                    </div>
                    <div class="notification-meta">
                        <span class="notification-time-full">${timeAgo}</span>
                        ${isUnread ? '<span class="notification-unread-indicator">New</span>' : ''}
                    </div>
                </div>
                <div class="notification-actions">
                    ${isUnread ? '<button class="btn btn-sm btn-outline-primary mark-read-btn" data-id="' + notification.id + '">Mark Read</button>' : ''}
                </div>
            </div>
        `;
    }).join('');
    
    if (reset) {
        listDiv.innerHTML = html;
    } else {
        listDiv.insertAdjacentHTML('beforeend', html);
    }
    
    // Add event listeners to new notification items
    addNotificationEventListeners();
}

function addNotificationEventListeners() {
    // Click handlers for notifications
    document.querySelectorAll('.notification-item-full').forEach(item => {
        if (!item.hasAttribute('data-listener-added')) {
            item.addEventListener('click', function(e) {
                if (!e.target.classList.contains('mark-read-btn')) {
                    const notificationId = this.dataset.id;
                    handleNotificationClick(notificationId);
                }
            });
            item.setAttribute('data-listener-added', 'true');
        }
    });
    
    // Mark read buttons
    document.querySelectorAll('.mark-read-btn').forEach(btn => {
        if (!btn.hasAttribute('data-listener-added')) {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const notificationId = this.dataset.id;
                markNotificationAsRead(notificationId);
            });
            btn.setAttribute('data-listener-added', 'true');
        }
    });
}

function updateFilterStats(totalCount, unreadCount) {
    const statsDiv = document.getElementById('filterStats');
    let statsText = '';
    
    if (currentFilter === 'all') {
        statsText = `${totalCount} total notification${totalCount !== 1 ? 's' : ''}`;
        if (unreadCount > 0) {
            statsText += `, ${unreadCount} unread`;
        }
    } else if (currentFilter === 'unread') {
        statsText = `${unreadCount} unread notification${unreadCount !== 1 ? 's' : ''}`;
    } else {
        statsText = `${totalCount} ${currentFilter.toLowerCase()} notification${totalCount !== 1 ? 's' : ''}`;
    }
    
    statsDiv.innerHTML = `<span class="total-count">${statsText}</span>`;
}

async function markAllNotificationsAsRead() {
    try {
        const response = await fetch('/api/notifications/mark-all-read', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        });
        
        if (response.ok) {
            // Reload notifications to reflect changes
            loadNotifications(true);
            showNotification('All notifications marked as read', 'success');
        } else {
            throw new Error('Failed to mark notifications as read');
        }
    } catch (error) {
        console.error('Error marking all notifications as read:', error);
        showNotification('Failed to mark notifications as read', 'error');
    }
}

async function markNotificationAsRead(notificationId) {
    try {
        const response = await fetch(`/api/notifications/${notificationId}/read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        });
        
        if (response.ok) {
            // Update UI
            const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
            if (notificationItem) {
                notificationItem.classList.remove('unread');
                const indicator = notificationItem.querySelector('.notification-unread-indicator');
                const markReadBtn = notificationItem.querySelector('.mark-read-btn');
                
                if (indicator) indicator.remove();
                if (markReadBtn) markReadBtn.remove();
            }
            
            showNotification('Notification marked as read', 'success');
        }
    } catch (error) {
        console.error('Error marking notification as read:', error);
        showNotification('Failed to mark notification as read', 'error');
    }
}

async function handleNotificationClick(notificationId) {
    await markNotificationAsRead(notificationId);
    // TODO: Navigate to relevant page based on notification type
}

function getNotificationIcon(type) {
    const icons = {
        'Like': 'fas fa-heart text-danger',
        'Comment': 'fas fa-comment text-primary',
        'Follow': 'fas fa-user-plus text-success',
        'Message': 'fas fa-paper-plane text-info',
        'StoryView': 'fas fa-eye text-warning',
        'Mention': 'fas fa-at text-purple'
    };
    return icons[type] || 'fas fa-bell text-secondary';
}

function getNotificationMessage(notification) {
    const messages = {
        'Like': 'liked your post',
        'Comment': 'commented on your post',
        'Follow': 'started following you',
        'Message': 'sent you a message',
        'StoryView': 'viewed your story',
        'Mention': 'mentioned you in a comment'
    };
    return messages[notification.type] || 'sent you a notification';
}

function setupSignalRNotifications() {
    if (typeof signalR === 'undefined') {
        console.warn('SignalR not available for real-time notifications');
        return;
    }
    
    const connection = new signalR.HubConnectionBuilder()
        .withUrl('/notificationHub')
        .build();
    
    connection.start().then(function() {
        console.log('Connected to notification hub');
    }).catch(function(err) {
        console.error('Error connecting to notification hub:', err);
    });
    
    // Listen for new notifications
    connection.on('NewNotification', function(notification) {
        // If we're showing all notifications or the current filter matches, add it to the top
        if (currentFilter === 'all' || 
            (currentFilter === 'unread' && !notification.isRead) ||
            currentFilter === notification.type) {
            
            const listDiv = document.getElementById('notificationsList');
            const newNotificationHtml = `
                <div class="notification-item-full unread new-notification" data-id="${notification.id}">
                    <div class="notification-icon-full">
                        <i class="${getNotificationIcon(notification.type)}"></i>
                    </div>
                    <div class="notification-content-full">
                        <div class="notification-user">
                            <img src="${notification.fromUser.profilePictureUrl || '/images/default-avatar.png'}" 
                                 alt="${escapeHtml(notification.fromUser.displayName || notification.fromUser.userName)}"
                                 class="notification-avatar">
                            <div class="notification-text-full">
                                <span class="notification-username">${escapeHtml(notification.fromUser.displayName || notification.fromUser.userName)}</span>
                                <span class="notification-action">${getNotificationMessage(notification)}</span>
                            </div>
                        </div>
                        <div class="notification-meta">
                            <span class="notification-time-full">just now</span>
                            <span class="notification-unread-indicator">New</span>
                        </div>
                    </div>
                    <div class="notification-actions">
                        <button class="btn btn-sm btn-outline-primary mark-read-btn" data-id="${notification.id}">Mark Read</button>
                    </div>
                </div>
            `;
            
            listDiv.insertAdjacentHTML('afterbegin', newNotificationHtml);
            addNotificationEventListeners();
            
            // Animate the new notification
            setTimeout(() => {
                const newItem = listDiv.querySelector('.new-notification');
                if (newItem) {
                    newItem.classList.remove('new-notification');
                }
            }, 1000);
        }
        
        showNotification(`${notification.fromUser.displayName || notification.fromUser.userName} ${getNotificationMessage(notification)}`, 'info');
    });
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>

<style>
.notifications-page {
    padding: var(--spacing-lg) 0;
}

.page-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-lg);
    background: var(--bg-primary);
    border-radius: var(--radius-lg);
    border: 1px solid var(--border-light);
}

.page-title {
    margin: 0;
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--text-primary);
}

.header-actions {
    display: flex;
    gap: var(--spacing-sm);
}

.filter-stats {
    margin-bottom: var(--spacing-md);
    padding: 0 var(--spacing-md);
    color: var(--text-secondary);
    font-size: 14px;
}

.notifications-container {
    background: var(--bg-primary);
    border-radius: var(--radius-lg);
    border: 1px solid var(--border-light);
    overflow: hidden;
}

.notification-item-full {
    padding: var(--spacing-lg);
    border-bottom: 1px solid var(--border-light);
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-md);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
}

.notification-item-full:last-child {
    border-bottom: none;
}

.notification-item-full:hover {
    background: var(--bg-secondary);
}

.notification-item-full.unread {
    background: rgba(24, 119, 242, 0.05);
    border-left: 4px solid var(--primary-blue);
}

.notification-item-full.unread:hover {
    background: rgba(24, 119, 242, 0.1);
}

.notification-item-full.new-notification {
    animation: notificationSlideIn 0.3s ease-out;
}

@@keyframes notificationSlideIn {
    from {
        opacity: 0;
        transform: translateX(-20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.notification-icon-full {
    flex-shrink: 0;
    width: 48px;
    height: 48px;
    border-radius: var(--radius-full);
    background: var(--bg-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
}

.notification-content-full {
    flex: 1;
    min-width: 0;
}

.notification-user {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-xs);
}

.notification-avatar {
    width: 40px;
    height: 40px;
    border-radius: var(--radius-full);
    object-fit: cover;
    border: 2px solid var(--border-light);
}

.notification-text-full {
    flex: 1;
    min-width: 0;
}

.notification-username {
    font-weight: 600;
    color: var(--text-primary);
    margin-right: var(--spacing-xs);
}

.notification-action {
    color: var(--text-secondary);
}

.notification-meta {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
}

.notification-time-full {
    font-size: 13px;
    color: var(--text-tertiary);
}

.notification-unread-indicator {
    background: var(--primary-blue);
    color: white;
    font-size: 11px;
    font-weight: 600;
    padding: 2px 8px;
    border-radius: 12px;
}

.notification-actions {
    flex-shrink: 0;
}

.dropdown-item.filter-option.active {
    background: var(--primary-blue);
    color: white;
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .page-header {
        flex-direction: column;
        gap: var(--spacing-md);
        align-items: stretch;
    }
    
    .header-actions {
        justify-content: center;
    }
    
    .notification-item-full {
        padding: var(--spacing-md);
        gap: var(--spacing-sm);
    }
    
    .notification-icon-full {
        width: 40px;
        height: 40px;
        font-size: 16px;
    }
    
    .notification-avatar {
        width: 32px;
        height: 32px;
    }
}
</style>
}
