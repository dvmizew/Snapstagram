@page "/Profile/{username?}"
@model ProfileViewModel
@{
    ViewData["Title"] = Model.ProfileUser?.DisplayName ?? "Profile";
}

@Html.AntiForgeryToken()

<div class="container mt-4">
    <div class="row">
        <!-- Profile Header -->
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            <div class="profile-image-container position-relative">
                                <img src="@(Model.ProfileUser?.ProfileImageUrl ?? "/images/default-avatar.svg")" 
                                     alt="@Model.ProfileUser?.DisplayName" 
                                     class="rounded-circle profile-image"
                                     style="width: 120px; height: 120px; object-fit: cover; border: 3px solid #e9ecef;">
                                @if (Model.IsOwnProfile)
                                {
                                    <button type="button" class="btn btn-sm btn-primary position-absolute" 
                                            style="bottom: 0; right: 0; border-radius: 50%; width: 30px; height: 30px;"
                                            title="Change profile image"
                                            onclick="openProfileImageModal()">
                                        <i class="fas fa-camera" style="font-size: 12px;"></i>
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex align-items-center mb-3">
                                <h2 class="mb-0 me-3">@@(Model.ProfileUser?.UserName)</h2>
                                @if (Model.IsOwnProfile)
                                {
                                    <button type="button" class="btn btn-outline-primary btn-sm me-2" onclick="openEditProfileModal()">
                                        <i class="fas fa-edit me-1"></i>Edit Profile
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="openProfileImageModal()">
                                        <i class="fas fa-camera me-1"></i>Change Photo
                                    </button>
                                }
                                else
                                {
                                    <form method="post" asp-page-handler="ToggleFollow" class="d-inline">
                                        <input type="hidden" name="targetUserId" value="@Model.ProfileUser?.Id" />
                                        <button type="submit" class="btn @(Model.IsFollowing ? "btn-outline-secondary" : "btn-primary") btn-sm">
                                            <i class="fas @(Model.IsFollowing ? "fa-user-minus" : "fa-user-plus") me-1"></i>
                                            @(Model.IsFollowing ? "Unfollow" : "Follow")
                                        </button>
                                    </form>
                                    <a href="#" class="btn btn-outline-primary btn-sm ms-2">
                                        <i class="fas fa-envelope me-1"></i>Message
                                    </a>
                                }
                            </div>
                            
                            <div class="d-flex mb-3">
                                <div class="me-4">
                                    <strong>@Model.PostsCount</strong> posts
                                </div>
                                <div class="me-4">
                                    <a href="#" class="text-decoration-none text-dark" onclick="openFollowersModal()">
                                        <strong>@Model.FollowersCount</strong> followers
                                    </a>
                                </div>
                                <div>
                                    <a href="#" class="text-decoration-none text-dark" onclick="openFollowingModal()">
                                        <strong>@Model.FollowingCount</strong> following
                                    </a>
                                </div>
                            </div>
                            
                            <div>
                                <h6 class="mb-1">@Model.ProfileUser?.DisplayName</h6>
                                @if (!string.IsNullOrEmpty(Model.ProfileUser?.Bio))
                                {
                                    <p class="text-muted mb-0">@Model.ProfileUser.Bio</p>
                                }
                                @if (Model.ProfileUser?.IsPrivate == true)
                                {
                                    <span class="badge bg-secondary mt-2">
                                        <i class="fas fa-lock me-1"></i>Private Account
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Link for Own Profile -->
    @if (Model.IsOwnProfile)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            <i class="fas fa-cog me-2"></i>Account Settings
                        </h5>
                        <p class="text-muted mb-3">Manage your account settings, privacy, and preferences</p>
                        <div class="d-flex flex-wrap gap-2">
                            <a href="/Settings" class="btn btn-primary">
                                <i class="fas fa-cog me-2"></i>Manage Account Settings
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="row mt-4">
        <div class="col-12">
            @if (Model.CanViewPosts)
            {
                @if (Model.Posts.Any())
                {
                    <div class="row g-1">
                        @foreach (var post in Model.Posts)
                        {
                            <div class="col-4">
                                <div class="position-relative">
                                    <img src="@post.ImageUrl" 
                                         alt="Post" 
                                         class="img-fluid w-100 post-thumbnail"
                                         style="aspect-ratio: 1; object-fit: cover; cursor: pointer;"
                                         onclick="openPostModal(@post.Id)"
                                         data-post-id="@post.Id">
                                    
                                    @if (!string.IsNullOrEmpty(post.VideoUrl))
                                    {
                                        <div class="position-absolute top-0 end-0 p-2">
                                            <i class="fas fa-play-circle text-white" style="font-size: 1.5rem; text-shadow: 0 0 5px rgba(0,0,0,0.7);"></i>
                                        </div>
                                    }
                                    
                                    <div class="position-absolute bottom-0 start-0 end-0 p-2 d-flex justify-content-between text-white" style="background: linear-gradient(transparent, rgba(0,0,0,0.7));">
                                        <span><i class="fas fa-heart me-1"></i>@post.LikesCount</span>
                                        <span><i class="fas fa-comment me-1"></i>@post.CommentsCount</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (Model.HasMorePosts)
                    {
                        <div class="text-center mt-4">
                            <button class="btn btn-outline-primary" id="loadMorePosts">
                                <i class="fas fa-plus me-2"></i>Load More Posts
                            </button>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-camera" style="font-size: 4rem; color: #dee2e6;"></i>
                        <h4 class="mt-3 text-muted">No Posts Yet</h4>
                        @if (Model.IsOwnProfile)
                        {
                            <p class="text-muted">Share your first photo or video!</p>
                            <a asp-page="/Create" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Create Post
                            </a>
                        }
                        else
                        {
                            <p class="text-muted">This user hasn't shared any posts yet.</p>
                        }
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-lock" style="font-size: 4rem; color: #dee2e6;"></i>
                    <h4 class="mt-3 text-muted">This Account is Private</h4>
                    <p class="text-muted">Follow @@(Model.ProfileUser?.UserName) to see their photos and videos.</p>
                </div>
            }
        </div>
    </div>
</div>





@section Scripts {
    <script>
        let currentPostId = null;
        let currentPage = 1;

        function loadUserList(type, userId, container) {
            fetch(`/api/profile/${type}/${userId}`)
                .then(response => response.json())
                .then(users => {
                    let html = '';
                    users.forEach(user => {
                        html += `
                            <div class="d-flex align-items-center mb-3">
                                <img src="${user.profileImageUrl || '/images/default-avatar.svg'}" 
                                     class="rounded-circle me-3" 
                                     style="width: 40px; height: 40px; object-fit: cover;">
                                <div class="flex-grow-1">
                                    <a href="/Profile/${user.userName}" class="text-decoration-none">
                                        <div class="fw-bold">${user.userName}</div>
                                        <div class="text-muted small">${user.displayName}</div>
                                    </a>
                                </div>
                            </div>
                        `;
                    });
                    $(container).html(html);
                })
                .catch(error => {
                    $(container).html('<p class="text-muted">Failed to load users.</p>');
                });
        }

        // Load more posts
        $('#loadMorePosts').click(function() {
            const button = $(this);
            button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Loading...');
            
            fetch(`/api/profile/posts/@Model.ProfileUser?.Id?page=${currentPage}`)
                .then(response => response.json())
                .then(posts => {
                    if (posts.length > 0) {
                        let html = '';
                        posts.forEach(post => {
                            html += `
                                <div class="col-4">
                                    <div class="position-relative">
                                        <img src="${post.imageUrl}" 
                                             alt="Post" 
                                             class="img-fluid w-100 post-thumbnail"
                                             style="aspect-ratio: 1; object-fit: cover; cursor: pointer;"
                                             onclick="openPostModal(${post.id})">
                                        
                                        ${post.videoUrl ? '<div class="position-absolute top-0 end-0 p-2"><i class="fas fa-play-circle text-white" style="font-size: 1.5rem; text-shadow: 0 0 5px rgba(0,0,0,0.7);"></i></div>' : ''}
                                        
                                        <div class="position-absolute bottom-0 start-0 end-0 p-2 d-flex justify-content-between text-white" style="background: linear-gradient(transparent, rgba(0,0,0,0.7));">
                                            <span><i class="fas fa-heart me-1"></i>${post.likesCount}</span>
                                            <span><i class="fas fa-comment me-1"></i>${post.commentsCount}</span>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        $('.row.g-1').append(html);
                        currentPage++;
                        
                        if (posts.length < 12) {
                            button.hide();
                        } else {
                            button.prop('disabled', false).html('<i class="fas fa-plus me-2"></i>Load More Posts');
                        }
                    } else {
                        button.hide();
                    }
                })
                .catch(error => {
                    button.prop('disabled', false).html('<i class="fas fa-plus me-2"></i>Load More Posts');
                });
        });

        async function openPostModal(postId) {
            currentPostId = postId;
            
            try {
                const response = await fetch(`/api/posts/${postId}`);
                if (response.ok) {
                    const post = await response.json();
                    loadPostIntoModal(post);
                } else {
                    showAlert({ message: 'Failed to load post details' });
                }
            } catch (error) {
                console.error('Error loading post:', error);
                showAlert({ message: 'Error loading post' });
            }
        }

        function loadPostIntoModal(post) {
            const mediaContent = post.videoUrl ? 
                `<video controls class="w-100 h-100" style="object-fit: contain;">
                    <source src="${post.videoUrl}" type="video/mp4">
                    Your browser does not support the video tag.
                </video>` :
                `<img src="${post.imageUrl}" alt="Post" class="w-100 h-100" style="object-fit: contain;">`;

            const modalContent = `
                <div class="row g-0">
                    <div class="col-md-8">
                        <div class="d-flex align-items-center justify-content-center bg-black" style="height: 600px;">
                            ${mediaContent}
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="d-flex flex-column h-100">
                            <div class="border-bottom p-3">
                                <div class="d-flex align-items-center">
                                    <img src="${post.user.profileImageUrl || '/images/default-avatar.svg'}" 
                                         alt="${post.user.displayName}" 
                                         class="rounded-circle me-3" 
                                         style="width: 40px; height: 40px; object-fit: cover;">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0 fw-semibold">${post.user.displayName}</h6>
                                        <small class="text-muted">${getRelativeTime(new Date(post.createdAt))}</small>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="p-3 border-bottom">
                                <div class="d-flex align-items-start">
                                    <img src="${post.user.profileImageUrl || '/images/default-avatar.svg'}" 
                                         alt="${post.user.displayName}" 
                                         class="rounded-circle me-3" 
                                         style="width: 32px; height: 32px; object-fit: cover;">
                                    <div>
                                        <span class="fw-semibold">${post.user.displayName}</span>
                                        <span class="ms-2">${post.caption || ''}</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex-grow-1 overflow-auto p-3" id="postComments" style="max-height: 400px;">
                            </div>
                            
                            <div class="border-top p-3">
                                <div class="d-flex justify-content-between mb-3">
                                    <div class="d-flex gap-3">
                                        <button id="postLikeBtn" class="btn p-0 border-0 bg-transparent fs-5 ${post.isLiked ? 'text-danger' : ''}" onclick="togglePostLike()">
                                            <i class="${post.isLiked ? 'fas' : 'far'} fa-heart"></i>
                                        </button>
                                        <button class="btn p-0 border-0 bg-transparent fs-5" onclick="focusPostComment()">
                                            <i class="far fa-comment"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="mb-2">
                                    <span id="postLikesCount" class="fw-semibold">${post.likesCount}</span> likes
                                </div>
                                
                                <div class="d-flex">
                                    <input type="text" id="postCommentInput" class="form-control border-0 bg-transparent" placeholder="Add a comment..." style="outline: none; box-shadow: none;">
                                    <button id="postCommentSubmit" class="btn btn-link text-primary p-0 ms-2" onclick="addPostComment()" disabled>Post</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            modal.show({
                title: '',
                body: modalContent,
                footer: '',
                size: 'extra-large',
                closable: true
            });

            loadPostComments(post.id);
            
            setTimeout(() => {
                const commentInput = document.getElementById('postCommentInput');
                const submitBtn = document.getElementById('postCommentSubmit');
                
                commentInput.addEventListener('input', function() {
                    submitBtn.disabled = !this.value.trim();
                });
            }, 100);
        }

        async function loadPostComments(postId) {
            try {
                const response = await fetch(`/api/posts/${postId}/comments`);
                if (response.ok) {
                    const comments = await response.json();
                    const commentsContainer = document.getElementById('postComments');
                    
                    let html = '';
                    comments.forEach(comment => {
                        html += `
                            <div class="d-flex mb-3">
                                <img src="${comment.user.profileImageUrl || '/images/default-avatar.svg'}" 
                                     alt="${comment.user.displayName}" 
                                     class="rounded-circle me-3" 
                                     style="width: 32px; height: 32px; object-fit: cover;">
                                <div>
                                    <div>
                                        <span class="fw-semibold">${comment.user.displayName}</span>
                                        <span class="ms-2">${comment.text}</span>
                                    </div>
                                    <small class="text-muted">${getRelativeTime(new Date(comment.createdAt))}</small>
                                </div>
                            </div>
                        `;
                    });
                    
                    commentsContainer.innerHTML = html;
                }
            } catch (error) {
                console.error('Error loading comments:', error);
            }
        }

        async function togglePostLike() {
            if (!currentPostId) return;
            
            try {
                const response = await fetch(`/api/posts/${currentPostId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    
                    // Update like button
                    const likeBtn = document.getElementById('postLikeBtn');
                    likeBtn.className = result.liked ? 'btn p-0 border-0 bg-transparent fs-5 text-danger' : 'btn p-0 border-0 bg-transparent fs-5';
                    likeBtn.querySelector('i').className = result.liked ? 'fas fa-heart' : 'far fa-heart';
                    
                    // Update likes count
                    document.getElementById('postLikesCount').textContent = result.likesCount;
                }
            } catch (error) {
                console.error('Error toggling like:', error);
            }
        }

        async function addPostComment() {
            if (!currentPostId) return;
            
            const input = document.getElementById('postCommentInput');
            const text = input.value.trim();
            
            if (!text) return;
            
            try {
                const response = await fetch(`/api/posts/${currentPostId}/comments`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ text })
                });
                
                if (response.ok) {
                    input.value = '';
                    document.getElementById('postCommentSubmit').disabled = true;
                    loadPostComments(currentPostId);
                }
            } catch (error) {
                console.error('Error adding comment:', error);
            }
        }

        function focusPostComment() {
            document.getElementById('postCommentInput').focus();
        }

        function sharePostModal() {
            if (!currentPostId) return;
            
            if (navigator.share) {
                navigator.share({
                    title: 'Check out this post on Snapstagram',
                    url: `${window.location.origin}/posts/${currentPostId}`
                });
            } else {
                const url = `${window.location.origin}/posts/${currentPostId}`;
                navigator.clipboard.writeText(url).then(() => {
                    alert('Link copied to clipboard!');
                });
            }
        }

        async function togglePostBookmark() {
            if (!currentPostId) return;
            
            try {
                const response = await fetch(`/api/posts/${currentPostId}/bookmark`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const bookmarkBtn = document.getElementById('postBookmarkBtn');
                    bookmarkBtn.querySelector('i').className = result.bookmarked ? 'fas fa-bookmark' : 'far fa-bookmark';
                }
            } catch (error) {
                console.error('Error toggling bookmark:', error);
            }
        }

        // Enable/disable comment submit button
        document.addEventListener('DOMContentLoaded', function() {
            const commentInput = document.getElementById('postCommentInput');
            if (commentInput) {
                commentInput.addEventListener('input', function() {
                    const submitBtn = document.getElementById('postCommentSubmit');
                    if (submitBtn) {
                        submitBtn.disabled = !this.value.trim();
                    }
                });
            }
        });

        // Handle clicking on existing posts
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('post-thumbnail')) {
                const postId = e.target.dataset.postId;
                if (postId) {
                    openPostModal(parseInt(postId));
                }
            }
        });

        // Profile modal functions using centralized modal system
        const ProfileModals = {
            // Show followers list
            showFollowers() {
                modal.show({
                    title: 'Followers',
                    body: '<div id="followersList"><div class="text-center"><div class="spinner-border" role="status"></div></div></div>',
                    footer: '<button type="button" class="btn btn-secondary" onclick="modal.hide()">Close</button>',
                    size: 'default'
                });
                
                loadUserList('followers', '@Model.ProfileUser?.Id', '#followersList');
            },

            // Show following list
            showFollowing() {
                modal.show({
                    title: 'Following',
                    body: '<div id="followingList"><div class="text-center"><div class="spinner-border" role="status"></div></div></div>',
                    footer: '<button type="button" class="btn btn-secondary" onclick="modal.hide()">Close</button>',
                    size: 'default'
                });
                
                loadUserList('following', '@Model.ProfileUser?.Id', '#followingList');
            },

            // Show profile image upload modal
            showProfileImageUpload() {
                const formContent = `
                    <form method="post" enctype="multipart/form-data" id="profileImageForm">
                        <div class="mb-3">
                            <label class="form-label">Choose a new profile picture:</label>
                            <input type="file" name="profileImage" class="form-control" accept="image/jpeg,image/jpg,image/png,image/gif" required />
                            <small class="form-text text-muted">
                                Supported formats: JPEG, PNG, GIF. Maximum size: 5MB.
                            </small>
                        </div>
                    </form>
                `;

                modal.form({
                    title: 'Change Profile Photo',
                    formContent: formContent,
                    submitText: 'Upload',
                    onSubmit: this.submitProfileImage
                });
            },

            // Submit profile image upload
            submitProfileImage() {
                const form = document.getElementById('profileImageForm');
                const formData = new FormData(form);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                return fetch(window.location.pathname + '?handler=UploadProfileImage', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        showNotification('Profile image updated successfully!', 'success');
                        setTimeout(() => window.location.reload(), 1000);
                        return true; // Close modal
                    } else {
                        showNotification('Error uploading image. Please try again.', 'error');
                        return false; // Keep modal open
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error uploading image. Please try again.', 'error');
                    return false; // Keep modal open
                });
            },

            // Show edit profile modal
            showEditProfile() {
                const formContent = `
                    <form method="post" class="edit-profile-form" id="editProfileForm">
                        <div class="form-group mb-3">
                            <label for="editDisplayName" class="form-label">Display Name</label>
                            <input type="text" 
                                   class="form-control" 
                                   id="editDisplayName" 
                                   name="DisplayName" 
                                   value="@(Model.ProfileUser?.DisplayName ?? "")"
                                   maxlength="50">
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="editBio" class="form-label">Bio</label>
                            <textarea class="form-control" 
                                      id="editBio" 
                                      name="Bio" 
                                      rows="3" 
                                      maxlength="150" 
                                      placeholder="Tell us about yourself...">@(Model.ProfileUser?.Bio ?? "")</textarea>
                            <small class="form-text text-muted">
                                <span id="bioCharCount">@(Model.ProfileUser?.Bio?.Length ?? 0)</span>/150 characters
                            </small>
                        </div>
                        
                        <div class="form-group mb-3">
                            <div class="form-check">
                                <input type="checkbox" 
                                       class="form-check-input" 
                                       id="editIsPrivate" 
                                       name="IsPrivate" 
                                       @(Model.ProfileUser?.IsPrivate == true ? "checked" : "")>
                                <label class="form-check-label" for="editIsPrivate">
                                    Private Account
                                </label>
                                <small class="form-text text-muted d-block">
                                    When your account is private, only people you approve can see your photos and videos.
                                </small>
                            </div>
                        </div>
                    </form>
                `;

                modal.form({
                    title: 'Edit Profile',
                    formContent: formContent,
                    submitText: 'Save Changes',
                    onSubmit: this.submitEditProfile
                });

                // Add bio character counter after modal is shown
                setTimeout(() => {
                    const bioInput = document.getElementById('editBio');
                    const charCount = document.getElementById('bioCharCount');
                    
                    if (bioInput && charCount) {
                        bioInput.addEventListener('input', function() {
                            const count = this.value.length;
                            charCount.textContent = count;
                            
                            if (count > 140) {
                                charCount.style.color = '#dc3545';
                            } else if (count > 120) {
                                charCount.style.color = '#ffc107';
                            } else {
                                charCount.style.color = '#6c757d';
                            }
                        });
                    }
                }, 100);
            },

            // Submit edit profile
            submitEditProfile() {
                const form = document.getElementById('editProfileForm');
                const formData = new FormData(form);
                
                const params = new URLSearchParams();
                params.append('DisplayName', formData.get('DisplayName') || '');
                params.append('Bio', formData.get('Bio') || '');
                params.append('IsPrivate', formData.get('IsPrivate') ? 'true' : 'false');
                params.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                return fetch(window.location.pathname + '?handler=UpdateProfile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: params
                })
                .then(response => {
                    if (response.ok) {
                        showNotification('Profile updated successfully!', 'success');
                        setTimeout(() => window.location.reload(), 1000);
                        return true; // Close modal
                    } else {
                        showNotification('Error updating profile. Please try again.', 'error');
                        return false; // Keep modal open
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error updating profile. Please try again.', 'error');
                    return false; // Keep modal open
                });
            },

            // Show change password modal
            showChangePassword() {
                const formContent = `
                    <form method="post" id="changePasswordForm">
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <input type="password" class="form-control" id="currentPassword" name="CurrentPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="newPassword" name="NewPassword" required minlength="6">
                        </div>
                        <div class="mb-3">
                            <label for="confirmNewPassword" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirmNewPassword" name="ConfirmNewPassword" required>
                        </div>
                    </form>
                `;

                modal.form({
                    title: 'Change Password',
                    formContent: formContent,
                    submitText: 'Change Password',
                    onSubmit: this.submitChangePassword
                });
            },

            // Submit change password
            submitChangePassword() {
                const form = document.getElementById('changePasswordForm');
                const formData = new FormData(form);
                
                if (formData.get('NewPassword') !== formData.get('ConfirmNewPassword')) {
                    showNotification('New passwords do not match.', 'error');
                    return false; // Keep modal open
                }

                const params = new URLSearchParams();
                params.append('CurrentPassword', formData.get('CurrentPassword'));
                params.append('NewPassword', formData.get('NewPassword'));
                params.append('ConfirmNewPassword', formData.get('ConfirmNewPassword'));
                params.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                return fetch(window.location.pathname + '?handler=ChangePassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: params
                })
                .then(response => {
                    if (response.ok) {
                        showNotification('Password changed successfully!', 'success');
                        return true; // Close modal
                    } else {
                        showNotification('Error changing password. Please check your current password.', 'error');
                        return false; // Keep modal open
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error changing password. Please try again.', 'error');
                    return false; // Keep modal open
                });
            },

            // Show data export confirmation
            showDataExport() {
                modal.confirm({
                    title: 'Download Your Data',
                    message: 'This will download a copy of all your data including profile information, posts, followers, and following lists. This may take a few moments to prepare.',
                    confirmText: 'Download Data',
                    cancelText: 'Cancel',
                    confirmClass: 'btn-info'
                }).then(confirmed => {
                    if (confirmed) {
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = window.location.pathname + '?handler=DownloadData';
                        
                        const token = document.createElement('input');
                        token.type = 'hidden';
                        token.name = '__RequestVerificationToken';
                        token.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        form.appendChild(token);
                        
                        document.body.appendChild(form);
                        form.submit();
                        document.body.removeChild(form);
                        
                        showNotification('Preparing your data for download...', 'success');
                    }
                });
            },

            // Show delete account modal
            showDeleteAccount() {
                const formContent = `
                    <div class="alert alert-danger mb-3">
                        <h6><i class="fas fa-exclamation-triangle me-2"></i>Warning</h6>
                        <p class="mb-0">This action cannot be undone. All your posts, followers, and account data will be permanently deleted.</p>
                    </div>
                    <form id="deleteAccountForm">
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm your password to delete account:</label>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        </div>
                    </form>
                `;

                modal.form({
                    title: 'Delete Account',
                    formContent: formContent,
                    submitText: 'Delete My Account',
                    onSubmit: this.submitDeleteAccount
                });
            },

            // Submit delete account
            submitDeleteAccount() {
                const password = document.getElementById('confirmPassword').value;
                
                if (!password) {
                    showNotification('Please enter your password to confirm account deletion.', 'error');
                    return false; // Keep modal open
                }

                return modal.confirm({
                    title: 'Final Confirmation',
                    message: 'Are you absolutely sure? This will permanently delete your account and cannot be undone.',
                    confirmText: 'Yes, Delete Forever',
                    cancelText: 'Cancel',
                    confirmClass: 'btn-danger'
                }).then(confirmed => {
                    if (confirmed) {
                        const params = new URLSearchParams();
                        params.append('confirmPassword', password);
                        params.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                        return fetch(window.location.pathname + '?handler=DeleteAccount', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: params
                        })
                        .then(response => {
                            if (response.ok) {
                                showNotification('Account deleted successfully. Redirecting...', 'success');
                                setTimeout(() => window.location.href = '/', 2000);
                                return true; // Close modal
                            } else {
                                showNotification('Error deleting account. Please check your password.', 'error');
                                return false; // Keep modal open
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showNotification('Error deleting account. Please try again.', 'error');
                            return false; // Keep modal open
                        });
                    }
                    return false; // Keep modal open if not confirmed
                });
            }
        };

        // Global functions for backward compatibility
        window.openFollowersModal = () => ProfileModals.showFollowers();
        window.openFollowingModal = () => ProfileModals.showFollowing();
        window.openProfileImageModal = () => ProfileModals.showProfileImageUpload();
        window.openEditProfileModal = () => ProfileModals.showEditProfile();
        window.openChangePasswordModal = () => ProfileModals.showChangePassword();
        window.openDataExportModal = () => ProfileModals.showDataExport();
        window.openDeleteAccountModal = () => ProfileModals.showDeleteAccount();
    </script>
}

<style>
    .post-thumbnail:hover {
        transform: scale(1.02);
        transition: transform 0.2s ease;
    }
</style>
