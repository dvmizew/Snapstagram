@page
@model FeedModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<Snapstagram.Models.User> UserManager
@{
    ViewData["Title"] = "Feed";
    Layout = "_Layout";
}

<div class="main-container">
    <!-- Left Sidebar -->
    <div class="sidebar-left">
        <div class="sidebar-card">
            <div class="sidebar-title">Quick Actions</div>
            <div class="quick-actions">
                <a href="/Create" class="quick-action-btn">
                    <i class="fas fa-plus"></i>
                    <span>Create Post</span>
                </a>
                <a href="/Create?type=story" class="quick-action-btn">
                    <i class="fas fa-bolt"></i>
                    <span>Add Story</span>
                </a>
                <a href="/Messages" class="quick-action-btn">
                    <i class="fas fa-paper-plane"></i>
                    <span>Messages</span>
                </a>
                <button class="quick-action-btn" onclick="showFeedActions()" style="border: none; background: none; width: 100%;">
                    <i class="fas fa-ellipsis-h"></i>
                    <span>More Actions</span>
                </button>
            </div>
        </div>
        
        <div class="sidebar-card">
            <div class="sidebar-title">Trending</div>
            <div class="trending-topics">
                <div class="trending-item">#TechNews</div>
                <div class="trending-item">#Photography</div>
                <div class="trending-item">#Travel</div>
                <div class="trending-item">#Food</div>
            </div>
        </div>
    </div>

    <!-- Feed Content -->
    <div class="feed-content">
        <!-- Stories Section -->
        <div class="stories-container">
            <div class="stories-scroll">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <div class="story-item add-story" onclick="openStoryCreator()">
                        <div class="story-avatar">
                            <div class="add-story-icon">
                                <i class="fas fa-plus"></i>
                            </div>
                        </div>
                        <div class="story-username">Your Story</div>
                    </div>
                }
                @foreach (var story in Model.Stories)
                {
                    <div class="story-item @(story.Views.Any(v => v.UserId == UserManager.GetUserId(User)) ? "viewed" : "")" 
                         onclick="viewStory(@story.Id)">
                        <div class="story-avatar">
                            <img src="@(story.User.ProfileImageUrl ?? FeedModel.GetDefaultAvatar(story.User.DisplayName))" 
                                 alt="@story.User.DisplayName" />
                            @if (story.MediaType == "video")
                            {
                                <div class="story-type-indicator">
                                    <i class="fas fa-play"></i>
                                </div>
                            }
                        </div>
                        <div class="story-username">@story.User.DisplayName</div>
                    </div>
                }
            </div>
        </div>

        <!-- Posts Feed -->
        <div class="posts-container">
            @foreach (var post in Model.Posts)
            {
                <div class="post-card slide-up">
                    <!-- Post Header -->
                    <div class="post-header">
                        <div class="post-user-info">
                            <img src="@(post.User.ProfileImageUrl ?? FeedModel.GetDefaultAvatar(post.User.DisplayName))" 
                                 alt="@post.User.DisplayName" class="post-avatar" />
                            <div>
                                <a href="/Profile/@post.User.UserName" class="post-username">@post.User.DisplayName</a>
                                <div class="post-time">@FeedModel.GetRelativeTime(post.CreatedAt)</div>
                            </div>
                        </div>
                        <button class="post-menu" onclick="showPostMenu(@post.Id)">
                            <i class="fas fa-ellipsis-h"></i>
                        </button>
                    </div>

                    <!-- Post Caption (if above image) -->
                    @if (!string.IsNullOrEmpty(post.Caption))
                    {
                        <div class="post-caption-top">
                            @post.Caption
                        </div>
                    }

                    <!-- Post Media -->
                    <div class="post-media-container">
                        @if (!string.IsNullOrEmpty(post.VideoUrl))
                        {
                            <video class="post-media" controls preload="metadata" onclick="handleMediaClick(this, @post.Id)">
                                <source src="@post.VideoUrl" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                            <div class="media-overlay">
                                <div class="play-button">
                                    <i class="fas fa-play"></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <img src="@post.ImageUrl" alt="Post image" class="post-media" 
                                 onclick="handleMediaClick(this, @post.Id)" />
                        }
                        
                        <!-- Instagram-style double-tap heart -->
                        <div class="double-tap-heart" id="heart-@post.Id">
                            <i class="fas fa-heart"></i>
                        </div>
                    </div>

                    <!-- Post Actions -->
                    <div class="post-actions">
                        <div class="action-group-left">
                            <button class="action-btn like-btn @(Model.UserLikes.Contains(post.Id) ? "liked" : "")" 
                                    onclick="toggleLike(@post.Id)" data-post-id="@post.Id">
                                <i class="@(Model.UserLikes.Contains(post.Id) ? "fas" : "far") fa-heart"></i>
                                <span class="action-count" id="likes-count-@post.Id">@post.LikesCount</span>
                            </button>
                            <button class="action-btn comment-btn" onclick="focusCommentInput(@post.Id)">
                                <i class="far fa-comment"></i>
                                <span class="action-count">@post.CommentsCount</span>
                            </button>
                            <button class="action-btn share-btn" onclick="sharePost(@post.Id)">
                                <i class="far fa-paper-plane"></i>
                            </button>
                        </div>
                        <button class="action-btn bookmark-btn" onclick="toggleBookmark(@post.Id)">
                            <i class="far fa-bookmark"></i>
                        </button>
                    </div>

                    <!-- Post Content -->
                    <div class="post-content">
                        <div class="post-likes">
                            <span id="likes-@post.Id">@post.LikesCount</span> likes
                        </div>
                        
                        @if (!string.IsNullOrEmpty(post.Caption))
                        {
                            <div class="post-caption">
                                <span class="username">@post.User.DisplayName</span>
                                <span class="caption-text">@post.Caption</span>
                            </div>
                        }
                        
                        @if (post.CommentsCount > 0)
                        {
                            <button class="view-comments" onclick="toggleComments(@post.Id)">
                                View all @post.CommentsCount comments
                            </button>
                        }
                        
                        <!-- Comments Section -->
                        <div class="comments-section" id="comments-@post.Id" style="display: none;">
                            <div class="comments-list" id="comments-list-@post.Id">
                                @foreach (var comment in post.Comments.Take(3))
                                {
                                    <div class="comment">
                                        <img src="@(comment.User.ProfileImageUrl ?? FeedModel.GetDefaultAvatar(comment.User.DisplayName))" 
                                             alt="@comment.User.DisplayName" class="comment-avatar" />
                                        <div class="comment-content">
                                            <div class="comment-text">
                                                <span class="comment-username">@comment.User.DisplayName</span>
                                                @comment.Text
                                            </div>
                                            <div class="comment-time">@FeedModel.GetRelativeTime(comment.CreatedAt)</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Add Comment -->
                        <form class="comment-form" onsubmit="addComment(event, @post.Id)">
                            <img src="@Model.CurrentUserAvatar" 
                                 alt="You" class="comment-avatar" />
                            <input type="text" class="comment-input" id="comment-input-@post.Id" 
                                   placeholder="Add a comment..." autocomplete="off" />
                            <button type="submit" class="comment-submit" disabled id="comment-submit-@post.Id">Post</button>
                        </form>
                    </div>
                </div>
            }
        </div>

        @if (!Model.Posts.Any())
        {
            <div class="empty-feed">
                <div class="empty-feed-icon">
                    <i class="fas fa-camera fa-3x"></i>
                </div>
                <h3>Welcome to Snapstagram!</h3>
                <p>Start following people to see their posts in your feed.</p>
                <a href="/Explore" class="btn btn-primary">Discover People</a>
            </div>
        }
    </div>

    <!-- Right Sidebar -->
    <div class="sidebar-right">
        <div class="sidebar-card">
            <div class="sidebar-title">Suggested for you</div>
            <div class="suggested-users">
                <!-- This would be populated with suggested users -->
                <div class="suggested-user">
                    <img src="https://via.placeholder.com/32x32/6c757d/ffffff?text=U" alt="User" class="suggested-avatar" />
                    <div class="suggested-info">
                        <div class="suggested-name">john_doe</div>
                        <div class="suggested-mutual">2 mutual friends</div>
                    </div>
                    <button class="follow-btn">Follow</button>
                </div>
                <div class="suggested-user">
                    <img src="https://via.placeholder.com/32x32/6c757d/ffffff?text=J" alt="User" class="suggested-avatar" />
                    <div class="suggested-info">
                        <div class="suggested-name">jane_smith</div>
                        <div class="suggested-mutual">5 mutual friends</div>
                    </div>
                    <button class="follow-btn">Follow</button>
                </div>
            </div>
        </div>
        
        <div class="sidebar-card">
            <div class="sidebar-title">Recent Activity</div>
            <div class="activity-feed">
                <div class="activity-item">
                    <i class="fas fa-heart text-danger"></i>
                    <span><strong>alex_photo</strong> liked your post</span>
                    <span class="activity-time">2m</span>
                </div>
                <div class="activity-item">
                    <i class="fas fa-comment text-primary"></i>
                    <span><strong>sarah_k</strong> commented on your post</span>
                    <span class="activity-time">5m</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Story Viewer Modal -->
<div class="story-modal" id="storyModal" style="display: none;">
    <div class="story-viewer">
        <div class="story-header">
            <div class="story-user-info">
                <img src="" alt="" class="story-user-avatar" id="storyUserAvatar" />
                <span class="story-user-name" id="storyUserName"></span>
                <span class="story-time" id="storyTime"></span>
            </div>
            <button class="story-close" onclick="closeStoryViewer()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="story-content">
            <div class="story-progress">
                <div class="progress-bar" id="storyProgress"></div>
            </div>
            <div class="story-media" id="storyMedia"></div>
        </div>
        <div class="story-controls">
            <button class="story-nav story-prev" onclick="previousStory()">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button class="story-nav story-next" onclick="nextStory()">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/feed.js"></script>
    <script>
        // Feed-specific modal demonstrations
        function showFeedActions() {
            showModal({
                title: 'Feed Actions',
                body: `
                    <div class="list-group list-group-flush">
                        <button class="list-group-item list-group-item-action" onclick="refreshFeed()">
                            <i class="fas fa-sync-alt me-3"></i>Refresh Feed
                        </button>
                        <button class="list-group-item list-group-item-action" onclick="showFeedSettings()">
                            <i class="fas fa-cog me-3"></i>Feed Settings
                        </button>
                        <button class="list-group-item list-group-item-action" onclick="reportIssue()">
                            <i class="fas fa-flag me-3"></i>Report Issue
                        </button>
                        <button class="list-group-item list-group-item-action" onclick="showKeyboardShortcuts()">
                            <i class="fas fa-keyboard me-3"></i>Keyboard Shortcuts
                        </button>
                        <button class="list-group-item list-group-item-action text-danger" onclick="clearCache()">
                            <i class="fas fa-trash me-3"></i>Clear Cache
                        </button>
                    </div>
                `,
                footer: `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                `,
                size: 'default'
            });
        }

        function refreshFeed() {
            window.modal.hide();
            showLoadingModal('Refreshing Feed', 'Loading latest posts...');
            
            setTimeout(() => {
                window.modal.hide();
                showNotification('Feed refreshed successfully!', 'success');
                // In a real app, you would reload the feed data here
            }, 2000);
        }

        function showFeedSettings() {
            window.modal.hide();
            showFormModal({
                title: 'Feed Settings',
                formContent: `
                    <form id="feedSettingsForm">
                        <div class="mb-3">
                            <label class="form-label">Show Posts From</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="feedType" id="allPosts" value="all" checked>
                                <label class="form-check-label" for="allPosts">
                                    Everyone I follow
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="feedType" id="closeFriends" value="close">
                                <label class="form-check-label" for="closeFriends">
                                    Close friends only
                                </label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Post Types</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showPhotos" checked>
                                <label class="form-check-label" for="showPhotos">
                                    Photos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showVideos" checked>
                                <label class="form-check-label" for="showVideos">
                                    Videos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showStories" checked>
                                <label class="form-check-label" for="showStories">
                                    Stories
                                </label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="postsPerPage" class="form-label">Posts per page</label>
                            <select class="form-control" id="postsPerPage" name="postsPerPage">
                                <option value="10">10 posts</option>
                                <option value="20" selected>20 posts</option>
                                <option value="50">50 posts</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="autoRefresh">
                                <label class="form-check-label" for="autoRefresh">
                                    Auto-refresh feed every 5 minutes
                                </label>
                            </div>
                        </div>
                    </form>
                `,
                submitText: 'Save Settings',
                onSubmit: (formData) => {
                    showNotification('Feed settings saved successfully!', 'success');
                    return true;
                }
            });
        }

        async function reportIssue() {
            window.modal.hide();
            
            const proceed = await showConfirm({
                title: 'Report an Issue',
                message: 'Are you experiencing a problem with the feed? We\'ll help you report it to our support team.',
                confirmText: 'Report Issue',
                cancelText: 'Cancel',
                icon: 'fas fa-flag'
            });

            if (proceed) {
                showFormModal({
                    title: 'Report Issue',
                    formContent: `
                        <form id="issueReportForm">
                            <div class="mb-3">
                                <label for="issueType" class="form-label">Issue Type *</label>
                                <select class="form-control" id="issueType" name="issueType" required>
                                    <option value="">Select issue type...</option>
                                    <option value="loading">Posts not loading</option>
                                    <option value="performance">Slow performance</option>
                                    <option value="display">Display issues</option>
                                    <option value="functionality">Feature not working</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="issueDescription" class="form-label">Description *</label>
                                <textarea class="form-control" id="issueDescription" name="description" rows="4" 
                                          placeholder="Please describe the issue you're experiencing..." required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="steps" class="form-label">Steps to Reproduce</label>
                                <textarea class="form-control" id="steps" name="steps" rows="3" 
                                          placeholder="1. Go to... 2. Click on... 3. See error..."></textarea>
                            </div>
                        </form>
                    `,
                    submitText: 'Submit Report',
                    size: 'large',
                    onSubmit: (formData) => {
                        showNotification('Issue report submitted successfully! We\'ll get back to you soon.', 'success');
                        return true;
                    }
                });
            }
        }

        function showKeyboardShortcuts() {
            window.modal.hide();
            showModal({
                title: 'Keyboard Shortcuts',
                body: `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Navigation</h6>
                            <table class="table table-sm">
                                <tr><td><kbd>H</kbd></td><td>Go to Home/Feed</td></tr>
                                <tr><td><kbd>M</kbd></td><td>Open Messages</td></tr>
                                <tr><td><kbd>C</kbd></td><td>Create new post</td></tr>
                                <tr><td><kbd>E</kbd></td><td>Explore page</td></tr>
                                <tr><td><kbd>P</kbd></td><td>Your profile</td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Actions</h6>
                            <table class="table table-sm">
                                <tr><td><kbd>L</kbd></td><td>Like selected post</td></tr>
                                <tr><td><kbd>Ctrl + Enter</kbd></td><td>Submit comment</td></tr>
                                <tr><td><kbd>Esc</kbd></td><td>Close modal/dialog</td></tr>
                                <tr><td><kbd>?</kbd></td><td>Show this help</td></tr>
                                <tr><td><kbd>R</kbd></td><td>Refresh feed</td></tr>
                            </table>
                        </div>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Tip: Most shortcuts work when no input field is focused.
                        </small>
                    </div>
                `,
                footer: `<button type="button" class="btn btn-primary" data-bs-dismiss="modal">Got it!</button>`,
                size: 'large'
            });
        }

        async function clearCache() {
            window.modal.hide();
            
            const confirmed = await showConfirm({
                title: 'Clear Cache',
                message: 'This will clear your locally stored data including cached images and posts. The feed will reload fresh content.',
                confirmText: 'Clear Cache',
                cancelText: 'Cancel',
                confirmClass: 'btn-warning',
                icon: 'fas fa-trash'
            });

            if (confirmed) {
                showLoadingModal('Clearing Cache', 'Removing cached data...');
                
                setTimeout(() => {
                    window.modal.hide();
                    showNotification('Cache cleared successfully!', 'success');
                }, 1500);
            }
        }

        // Example post menu functionality
        function showPostMenu(postId) {
            showModal({
                title: 'Post Options',
                body: `
                    <div class="list-group list-group-flush">
                        <button class="list-group-item list-group-item-action" onclick="sharePost(${postId})">
                            <i class="fas fa-share me-3"></i>Share Post
                        </button>
                        <button class="list-group-item list-group-item-action" onclick="savePost(${postId})">
                            <i class="fas fa-bookmark me-3"></i>Save Post
                        </button>
                        <button class="list-group-item list-group-item-action" onclick="copyLink(${postId})">
                            <i class="fas fa-link me-3"></i>Copy Link
                        </button>
                        <button class="list-group-item list-group-item-action text-danger" onclick="reportPost(${postId})">
                            <i class="fas fa-flag me-3"></i>Report Post
                        </button>
                    </div>
                `,
                footer: `<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>`
            });
        }

        function sharePost(postId) {
            window.modal.hide();
            showModal({
                title: 'Share Post',
                body: `
                    <div class="mb-3">
                        <label class="form-label">Share to:</label>
                        <div class="d-flex gap-2 mb-3">
                            <button class="btn btn-outline-primary flex-fill">
                                <i class="fab fa-facebook me-2"></i>Facebook
                            </button>
                            <button class="btn btn-outline-info flex-fill">
                                <i class="fab fa-twitter me-2"></i>Twitter
                            </button>
                            <button class="btn btn-outline-success flex-fill">
                                <i class="fab fa-whatsapp me-2"></i>WhatsApp
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="shareLink" class="form-label">Or copy link:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="shareLink" 
                                   value="https://snapstagram.com/posts/${postId}" readonly>
                            <button class="btn btn-outline-secondary" onclick="copyToClipboard('shareLink')">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                `,
                footer: `<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>`
            });
        }

        function savePost(postId) {
            window.modal.hide();
            showNotification('Post saved to your collection!', 'success');
        }

        function copyLink(postId) {
            window.modal.hide();
            navigator.clipboard.writeText(`https://snapstagram.com/posts/${postId}`);
            showNotification('Link copied to clipboard!', 'success');
        }

        async function reportPost(postId) {
            window.modal.hide();
            
            const reason = await new Promise(resolve => {
                showModal({
                    title: 'Report Post',
                    body: `
                        <p class="mb-3">Why are you reporting this post?</p>
                        <div class="list-group">
                            <button class="list-group-item list-group-item-action" onclick="selectReason('spam', ${resolve})">
                                <i class="fas fa-ban me-3"></i>It's spam
                            </button>
                            <button class="list-group-item list-group-item-action" onclick="selectReason('inappropriate', ${resolve})">
                                <i class="fas fa-exclamation-triangle me-3"></i>Inappropriate content
                            </button>
                            <button class="list-group-item list-group-item-action" onclick="selectReason('harassment', ${resolve})">
                                <i class="fas fa-user-shield me-3"></i>Harassment or bullying
                            </button>
                            <button class="list-group-item list-group-item-action" onclick="selectReason('false', ${resolve})">
                                <i class="fas fa-times-circle me-3"></i>False information
                            </button>
                            <button class="list-group-item list-group-item-action" onclick="selectReason('other', ${resolve})">
                                <i class="fas fa-ellipsis-h me-3"></i>Something else
                            </button>
                        </div>
                    `,
                    footer: `<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="selectReason(null, ${resolve})">Cancel</button>`
                });
            });

            if (reason) {
                showNotification('Post has been reported. Thank you for helping keep our community safe.', 'success');
            }
        }

        function selectReason(reason, callback) {
            window.modal.hide();
            callback(reason);
        }

        function copyToClipboard(elementId) {
            const element = document.getElementById(elementId);
            element.select();
            navigator.clipboard.writeText(element.value);
            showNotification('Copied to clipboard!', 'success');
        }

        // Story creator modal
        function openStoryCreator() {
            showModal({
                title: 'Create Story',
                body: `
                    <div class="text-center">
                        <div class="story-upload-area mb-3" style="border: 2px dashed #ddd; padding: 40px; border-radius: 8px;">
                            <i class="fas fa-camera fa-3x text-muted mb-3"></i>
                            <p class="text-muted">Click to add photo or video</p>
                            <input type="file" class="d-none" accept="image/*,video/*" onchange="previewStoryMedia(this)">
                        </div>
                        <div id="storyPreview" style="display: none;">
                            <img id="storyImage" style="max-width: 100%; max-height: 300px; border-radius: 8px;">
                            <video id="storyVideo" controls style="max-width: 100%; max-height: 300px; border-radius: 8px; display: none;"></video>
                        </div>
                    </div>
                `,
                footer: `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" disabled id="publishStoryBtn">Publish Story</button>
                `,
                size: 'large'
            });

            // Add click handler to upload area
            document.querySelector('.story-upload-area').addEventListener('click', () => {
                document.querySelector('.story-upload-area input[type="file"]').click();
            });
        }

        function previewStoryMedia(input) {
            if (input.files && input.files[0]) {
                const file = input.files[0];
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const preview = document.getElementById('storyPreview');
                    const image = document.getElementById('storyImage');
                    const video = document.getElementById('storyVideo');
                    
                    preview.style.display = 'block';
                    
                    if (file.type.startsWith('image/')) {
                        image.src = e.target.result;
                        image.style.display = 'block';
                        video.style.display = 'none';
                    } else if (file.type.startsWith('video/')) {
                        video.src = e.target.result;
                        video.style.display = 'block';
                        image.style.display = 'none';
                    }
                    
                    document.getElementById('publishStoryBtn').disabled = false;
                    document.getElementById('publishStoryBtn').onclick = function() {
                        window.modal.hide();
                        showNotification('Story published successfully!', 'success');
                    };
                };
                
                reader.readAsDataURL(file);
            }
        }
    </script>
}
