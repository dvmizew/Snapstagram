@page "/Chat/Conversation"
@model Snapstagram.Pages.Chat.ConversationModel
@{
    ViewData["Title"] = $"Chat with {Model.OtherUser?.FirstName} {Model.OtherUser?.LastName}";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm h-100">
                <!-- Chat Header -->
                <div class="card-header bg-primary text-white">
                    <div class="d-flex align-items-center">
                        <a href="/Chat/Index" class="btn btn-light btn-sm me-3">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                        <img src="@(Model.OtherUser?.ProfilePictureUrl ?? "/images/default-avatar.png")" 
                             alt="@Model.OtherUser?.UserName" 
                             class="rounded-circle me-3" 
                             style="width: 40px; height: 40px; object-fit: cover;">
                        <div>
                            <h6 class="mb-0">@Model.OtherUser?.FirstName @Model.OtherUser?.LastName</h6>
                            <small class="text-light">@(Model.OtherUser?.IsActive == true ? "Active" : "Inactive")</small>
                        </div>
                    </div>
                </div>

                <!-- Messages Container -->
                <div class="card-body p-0" style="height: 60vh;">
                    <div id="messagesContainer" class="h-100 overflow-auto p-3">
                        @if (Model.Messages.Any())
                        {
                            @foreach (var message in Model.Messages)
                            {
                                <div class="message-item mb-3 @(message.SenderId == Model.CurrentUserId ? "text-end" : "text-start")">
                                    <div class="message-bubble @(message.SenderId == Model.CurrentUserId ? "sent" : "received")">
                                        <div class="message-content">@message.Content</div>
                                        <div class="message-time">
                                            @message.SentAt.ToString("HH:mm")
                                            @if (message.SenderId == Model.CurrentUserId)
                                            {
                                                <i class="fas fa-check @(message.IsRead ? "text-success" : "text-muted") ms-1"></i>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted py-5">
                                <i class="fas fa-comments fa-3x mb-3"></i>
                                <p>No messages yet. Start the conversation!</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Message Input -->
                <div class="card-footer bg-light">
                    <form id="messageForm" class="d-flex">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="recipientId" value="@Model.OtherUser?.Id" />
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" 
                                   placeholder="Type your message..." required>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .message-bubble {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 18px;
            margin-bottom: 5px;
            word-wrap: break-word;
            position: relative;
        }

        .message-bubble.sent {
            background-color: var(--bs-primary);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .message-bubble.received {
            background-color: var(--bs-light);
            color: var(--bs-dark);
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }

        .message-content {
            margin-bottom: 5px;
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.8;
        }

        .message-bubble.sent .message-time {
            text-align: right;
        }

        .message-bubble.received .message-time {
            text-align: left;
        }

        #messagesContainer {
            scrollbar-width: thin;
            scrollbar-color: var(--bs-secondary) transparent;
        }

        #messagesContainer::-webkit-scrollbar {
            width: 6px;
        }

        #messagesContainer::-webkit-scrollbar-track {
            background: transparent;
        }

        #messagesContainer::-webkit-scrollbar-thumb {
            background: var(--bs-secondary);
            border-radius: 3px;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const messagesContainer = document.getElementById('messagesContainer');
            const messageForm = document.getElementById('messageForm');
            const messageInput = document.getElementById('messageInput');
            const recipientId = document.getElementById('recipientId').value;

            // Scroll to bottom on load
            scrollToBottom();

            // Handle form submission
            messageForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const content = messageInput.value.trim();
                if (!content) return;

                // Add message to UI immediately
                addMessageToUI(content, '@Model.CurrentUserId', new Date());
                messageInput.value = '';
                scrollToBottom();

                // Send message to server
                try {
                    const formData = new FormData();
                    formData.append('Content', content);
                    formData.append('RecipientId', recipientId);

                    const response = await fetch('/Chat/SendMessage', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        }
                    });

                    const result = await response.json();
                    if (!result.success) {
                        console.error('Failed to send message:', result.message);
                        // You might want to show an error message to the user
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                }
            });

            function addMessageToUI(content, senderId, sentAt) {
                const messageDiv = document.createElement('div');
                const isCurrentUser = senderId === '@Model.CurrentUserId';
                
                messageDiv.className = `message-item mb-3 ${isCurrentUser ? 'text-end' : 'text-start'}`;
                messageDiv.innerHTML = `
                    <div class="message-bubble ${isCurrentUser ? 'sent' : 'received'}">
                        <div class="message-content">${escapeHtml(content)}</div>
                        <div class="message-time">
                            ${formatTime(sentAt)}
                            ${isCurrentUser ? '<i class="fas fa-check text-muted ms-1"></i>' : ''}
                        </div>
                    </div>
                `;

                messagesContainer.appendChild(messageDiv);
            }

            function scrollToBottom() {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            function formatTime(date) {
                return new Intl.DateTimeFormat('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                }).format(date);
            }

            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            // Mark messages as read
            markMessagesAsRead();

            function markMessagesAsRead() {
                const unreadMessages = document.querySelectorAll('.message-bubble.received');
                unreadMessages.forEach(async (bubble) => {
                    // Implementation for marking as read would go here
                });
            }
        });
    </script>
}
